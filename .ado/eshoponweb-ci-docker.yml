# NAME THE PIPELINE SAME AS FILE (WITHOUT ".yml")

resources:
  repositories:
    - repository: self
      trigger: none

variables:
  azureServiceConnection: 'azure subs'
  subscriptionId: 'abcc12e8-46f6-4fb0-ae1f-86a92dafdaa7'
  resourceGroup: 'rg-az400-container-danasoft'
  location: 'centralus'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: eShopOnWebSelfPool
      demands: Agent.Name -equals eShopOnWebSelfAgent
    steps:
    # Install Docker on Windows (if not already installed)
    - task: Bash@3
      displayName: 'Install Docker using Bash'
      inputs:
        targetType: 'inline'
        script: |
          # Check if Docker is installed
          if ! command -v docker &>/dev/null; then
              echo "Docker not found. Installing Docker..."
              # Download Docker installer for Windows and run it
              curl -fsSL https://get.docker.com/ -o get-docker.sh
              bash get-docker.sh
              echo "Docker installation complete."
          else
              echo "Docker is already installed."
          fi

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: Deploy ACR using Bicep
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: $(azureServiceConnection)
        subscriptionId: $(subscriptionId)
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroup)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'infra/acr.bicep'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'outputJson'
    - task: PowerShell@2
      displayName: Parse Bicep Output
      inputs:
        targetType: 'inline'
        script: |
          $var=ConvertFrom-Json '$(outputJson)'
          $value=$var.acrLoginServer.value
          Write-Host "##vso[task.setvariable variable=acrLoginServer;]$value"
    - task: Docker@0
      displayName: 'Build the docker image'
      inputs:
        azureSubscription: $(azureServiceConnection)
        azureContainerRegistry: $(acrLoginServer)
        dockerFile: 'src/Web/Dockerfile'
        defaultContext: false
        context: $(Build.SourcesDirectory)
        includeLatestTag: true
        imageName: eshoponweb/web:$(Build.BuildId)
    - task: Docker@0
      displayName: 'Push the docker images'
      inputs:
        azureSubscription: $(azureServiceConnection)
        azureContainerRegistry: $(acrLoginServer)
        action: 'Push an image'
        imageName: eshoponweb/web:$(Build.BuildId)
        includeLatestTag: true
    
